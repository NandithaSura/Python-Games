TIC-TAC-TOE
============

from tkinter import *
import tkinter.messagebox as msg

root = Tk()
root.title('TIC-TAC-TOE')
digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]
mark = ' ' ""
count = 0
panels = ["panels"] * 10


def win(panels, sign):
    return ((panels[1] == panels[2] == panels[3] == sign)
            or (panels[1] == panels[5] == panels[9] == sign)
            or (panels[1] == panels[4] == panels[7] == sign)
            or (panels[2] == panels[5] == panels[8] == sign)
            or (panels[3] == panels[6] == panels[9] == sign)
            or (panels[3] == panels[5] == panels[7] == sign)
            or (panels[4] == panels[5] == panels[6] == sign)
            or (panels[7] == panels[8] == panels[9] == sign))


def checker(digit):
    global digits, count, mark
    if digit == 1 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button1.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 2 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button2.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 3 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button3.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 4 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button4.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 5 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button5.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 6 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button6.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 7 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button7.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 8 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button8.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


    if digit == 9 and digit in digits:
        digits.remove(digit)
        if count % 2 == 0:
            mark = 'x'
            panels[digit] = mark
        elif count % 2 != 0:
            mark = 'o'
            panels[digit] = mark
        button9.config(text=mark)
        count = count + 1
        sign = mark
        if (win(panels, sign) and sign == 'x'):
            msg.showinfo("result", "player1 wins")
            root.destroy()
        elif (win(panels, sign) and sign == 'o'):
            msg.showinfo("result", "player2 wins")
            root.destroy()


if count > 8 and win(panels, 'x') == False and win(panels, 'o') == False:
    msg.showinfo("result", "match tied")
    root.destroy()

Label(root, text="player1:x", font="times=15").grid(row=0, column=1)
Label(root, text="player2:o", font="times=15").grid(row=0, column=2)

button1 = Button(root, width=15, height=7, font=('Times 16 bold'), command=lambda: checker(1))
button1.grid(row=1, column=1)

button2 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(2))
button2.grid(row=1, column=2)

button3 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(3))
button3.grid(row=1, column=3)

button4 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(4))
button4.grid(row=2, column=1)

button5 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(5))
button5.grid(row=2, column=2)

button6 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(6))
button6.grid(row=2, column=3)

button7 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(7))
button7.grid(row=3, column=1)

button8 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(8))
button8.grid(row=3, column=2)

button9 = Button(root, width=15, font=('Times 16 bold'), height=7, command=lambda: checker(9))
button9.grid(row=3, column=3)

root.mainloop()
============================================================================================================================================================================================
SNAKE GAME:
-----------
# importing libraries
import turtle
import random
import time

# creating turtle screen
screen = turtle.Screen()
screen.title('DATAFLAIR-SNAKE GAME')
screen.setup(width=700, height=700)
screen.tracer(0)
turtle.bgcolor('turquoise')

##creating a border for our game

turtle.speed(5)
turtle.pensize(4)
turtle.penup()
turtle.goto(-310, 250)
turtle.pendown()
turtle.color('black')
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.right(90)
turtle.forward(600)
turtle.right(90)
turtle.forward(500)
turtle.penup()
turtle.hideturtle()

# score
score = 0
delay = 0.1

# snake
snake = turtle.Turtle()
snake.speed(0)
snake.shape('square')
snake.color("black")
snake.penup()
snake.goto(0, 0)
snake.direction = 'stop'

# food
fruit = turtle.Turtle()
fruit.speed(0)
fruit.shape('circle')
fruit.color('red')
fruit.penup()
fruit.goto(30, 30)

old_fruit = []

# scoring
scoring = turtle.Turtle()
scoring.speed(0)
scoring.color("black")
scoring.penup()
scoring.hideturtle()
scoring.goto(0, 300)
scoring.write("Score :", align="center", font=("Courier", 24, "bold"))


#######define how to move
def snake_go_up():
    if snake.direction != "down":
        snake.direction = "up"


def snake_go_down():
    if snake.direction != "up":
        snake.direction = "down"


def snake_go_left():
    if snake.direction != "right":
        snake.direction = "left"


def snake_go_right():
    if snake.direction != "left":
        snake.direction = "right"


def snake_move():
    if snake.direction == "up":
        y = snake.ycor()
        snake.sety(y + 20)

    if snake.direction == "down":
        y = snake.ycor()
        snake.sety(y - 20)

    if snake.direction == "left":
        x = snake.xcor()
        snake.setx(x - 20)

    if snake.direction == "right":
        x = snake.xcor()
        snake.setx(x + 20)


# Keyboard bindings
screen.listen()
screen.onkeypress(snake_go_up, "Up")
screen.onkeypress(snake_go_down, "Down")
screen.onkeypress(snake_go_left, "Left")
screen.onkeypress(snake_go_right, "Right")

# main loop

while True:
    screen.update()
    # snake and fruit coliisions
    if snake.distance(fruit) < 20:
        x = random.randint(-290, 270)
        y = random.randint(-240, 240)
        fruit.goto(x, y)
        scoring.clear()
        score += 1
        scoring.write("Score:{}".format(score), align="center", font=("Courier", 24, "bold"))
        delay -= 0.001

        ## creating new_ball
        new_fruit = turtle.Turtle()
        new_fruit.speed(0)
        new_fruit.shape('square')
        new_fruit.color('red')
        new_fruit.penup()
        old_fruit.append(new_fruit)

    # adding ball to snake

    for index in range(len(old_fruit) - 1, 0, -1):
        a = old_fruit[index - 1].xcor()
        b = old_fruit[index - 1].ycor()

        old_fruit[index].goto(a, b)

    if len(old_fruit) > 0:
        a = snake.xcor()
        b = snake.ycor()
        old_fruit[0].goto(a, b)
    snake_move()

    ##snake and border collision
    if snake.xcor() > 280 or snake.xcor() < -300 or snake.ycor() > 240 or snake.ycor() < -240:
        time.sleep(1)
        screen.clear()
        screen.bgcolor('turquoise')
        scoring.goto(0, 0)
        scoring.write("   GAME OVER \n Your Score is {}".format(score), align="center", font=("Courier", 30, "bold"))

    ## snake collision
    for food in old_fruit:
        if food.distance(snake) < 20:
            time.sleep(1)
            screen.clear()
            screen.bgcolor('turquoise')
            scoring.goto(0, 0)
            scoring.write("    GAME OVER \n Your Score is {}".format(score), align="center",
                          font=("Courier", 30, "bold"))

    time.sleep(delay)

turtle.Terminator()

==================================================================================================================================================================================





